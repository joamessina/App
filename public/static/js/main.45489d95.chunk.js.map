{"version":3,"sources":["logo.svg","components/Navigation.js","components/TodoForm.js","Api.js","socket.js","components/Todo.js","components/TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navigation","react_default","a","createElement","className","href","this","props","titulo","Component","TodoForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","title","responsible","description","priority","handleInput","bind","assertThisInitialized","handleSubmit","e","preventDefault","onAddTodo","setState","_e$target","target","value","name","defineProperty","onSubmit","type","placeholder","onChange","Api","fetch","concat","API_URL","then","response","json","map","element","id","$loki","created","meta","callback","errorCallback","method","item","error","message","task","headers","Content-Type","body","JSON","stringify","Socket","socket","openSocket","forceNew","on","data","tasks","emit","Todo","onClick","onDeleteTodo","index","TodoContainer","todos","todo","components_Todo","key","SocketClient","App","isLoaded","handleAddTodo","_this2","getAll","items","create","Swal","fire","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","delete","_this$state","components_Navigation","src","logo","alt","components_TodoForm","components_TodoContainer","handleDeleteTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45489d95.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{ Component } from 'react';\n\nclass Navigation extends Component{\n    render(){\n        return(\n            <nav className=\"navbar navbar-dark bg-dark\">\n                <a href=\"\" className=\"text-white\">\n                    {this.props.titulo}\n                </a>\n            </nav> \n        )       \n    }\n}\n\nexport default Navigation;","import React,{ Component } from 'react';\n\nclass TodoForm extends Component{\n\n    constructor(){\n        super()\n        this.state = {\n            title: '',\n            responsible: '',\n            description: '',\n            priority: 'low'\n        }\n\n        this.handleInput = this.handleInput.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleSubmit(e){\n        e.preventDefault()\n        this.props.onAddTodo(this.state)\n        this.setState({\n            title: '',\n            responsible: '',\n            description: '',\n            priority: 'low'            \n        })\n    }\n\n    handleInput(e){\n        const {value,name} = e.target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    render(){\n        return(\n            <div className=\"card\">\n            <form className=\"card-body\" onSubmit={this.handleSubmit}>\n              <div className=\"form-group\">\n                <input\n                  type=\"text\"\n                  name=\"title\"\n                  className=\"form-control\"\n                  placeholder=\"Title\"\n                  onChange={this.handleInput}\n                  value={this.state.title}\n                  />\n              </div>\n              <div className=\"form-group\">\n                <input\n                  type=\"text\"\n                  name=\"responsible\"\n                  className=\"form-control\"\n                  placeholder=\"Responsible\"\n                  onChange={this.handleInput}     \n                  value={this.state.responsible}             \n                  />\n              </div>\n              <div className=\"form-group\">\n                <input\n                  type=\"text\"\n                  name=\"description\"\n                  className=\"form-control\"\n                  placeholder=\"Description\"\n                  onChange={this.handleInput}\n                  value={this.state.description}  \n                  />\n              </div>\n              <div className=\"form-group\">\n                <select\n                    name=\"priority\"\n                    className=\"form-control\"\n                    onChange={this.handleInput}\n                    value={this.state.priority} \n                  >\n                  <option>low</option>\n                  <option>medium</option>\n                  <option>high</option>\n                </select>\n              </div>\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Save\n              </button>\n            </form>\n          </div>\n        )       \n    }\n}\n\nexport default TodoForm;","class Api{\n\n    static get API_URL(){\n        return 'http://localhost:8080'\n    }\n\n    async getAll(){\n        return await fetch(`${Api.API_URL}/tasks`)\n        .then( response => response.json())\n        .then( response => response.response.map( element => {\n            return {\n                id: element.$loki,\n                created: element.meta.created,\n                title: element.title,\n                responsible: element.responsible,\n                description: element.description,\n                priority: element.priority\n            }\n        } ) )\n    }\n\n    async delete(id,callback,errorCallback){\n        await fetch(`${Api.API_URL}/tasks/${id}`,{\n            method: 'DELETE'\n        }).then( item => {\n           callback && callback()\n        } , error => {\n            errorCallback && errorCallback(error.message)\n        })\n    }\n\n\n     async create(task,callback){\n             await fetch(`${Api.API_URL}/tasks`,{\n                method : 'POST',\n                headers:{\n                    'Content-Type': \"application/json\"\n                },\n                body: JSON.stringify(task)\n            })\n             .then( response => response.json())\n               .then( response => {\n            return {\n                id: response.response.$loki,\n                created: response.response.meta.created,\n                title: response.response.title,\n                responsible: response.response.responsible,\n                description: response.response.description,\n                priority: response.response.priority\n            }\n        })\n       .then(response => {\n        callback && callback(response)\n       })\n        }\n}\n\nexport default Api\n\n\n/*const API_URL = 'http://localhost:8080'\n\nexport async function getAll(){\n\n    return await fetch(`${API_URL}/tasks`,{\n        method: 'GET'\n    }).then( data => data.json())\n\n}*/","import openSocket from 'socket.io-client'\r\n\r\nclass Socket {\r\n\r\n    constructor(){\r\n        this.socket = openSocket(`/`,{ forceNew: true })\r\n    }\r\n\r\n    async getAll(callback){\r\n        await this.socket.on(`tasks_emit`, data => {\r\n            \r\n            let tasks = data.map( element => {\r\n                return {\r\n                    id: element.$loki,\r\n                    created: element.meta.created,\r\n                    title: element.title,\r\n                    responsible: element.responsible,\r\n                    description: element.description,\r\n                    priority: element.priority\r\n                }\r\n            } )\r\n\r\n            callback && callback(tasks)\r\n\r\n        })\r\n    }\r\n\r\n    async create(task){\r\n        this.socket.emit(`task_create`,task)\r\n    }\r\n\r\n    async delete(id){\r\n        this.socket.emit(`task_delete`,id)\r\n    }\r\n\r\n}\r\n\r\nexport default Socket","import React,{ Component } from 'react';\nclass Todo extends Component{\n    render(){\n        return(\n            <div className=\"col-md-4\">\n                <div className=\"card mt-4\" >\n                <div className=\"card-header bg-negro\">\n                    <h3>{this.props.data.title}</h3>\n                    <span className=\"badge badge-pill btn-danger\">\n                    {this.props.data.priority}            \n                    </span>\n                </div>\n                <div className=\"card-body\">\n                    <p>{this.props.data.description}</p>\n                    <p>{this.props.data.responsible}</p>\n                </div>   \n        \n                <div className=\"card-footer\">\n                    <button \n                    className=\"btn btn-danger\"            \n                    onClick={() => { this.props.onDeleteTodo(this.props.index) }}\n                    >\n                    Delete\n                    </button>    \n                </div> \n        \n                </div>   \n          </div>\n        )       \n    }\n}\n\nexport default Todo;","import React,{ Component } from 'react';\nimport Todo from './Todo';\n\nclass TodoContainer extends Component{\n    render(){\n        return(\n            <div className=\"row\">\n                {\n                    this.props.todos.map((todo) => {\n                        return(<Todo data={todo} key={todo.id} index={todo.id} onDeleteTodo={this.props.onDeleteTodo}  />)\n                    })\n                }                \n            </div>\n        )       \n    }\n}\n\nexport default TodoContainer;","import React, { Component } from 'react';\nimport Swal from 'sweetalert2'    \nimport logo from './logo.svg';\nimport './App.css';\n\nimport Navigation from './components/Navigation'\nimport TodoForm from './components/TodoForm'\n\n//import { todos } from './todos.json'\n\nimport Api from './Api'\nimport Socket from './socket'\n\nimport TodoContainer from './components/TodoContainer'\n\nconst Client = new Api()\nconst SocketClient = new Socket()\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      todos: [],\n      error: null,\n      isLoaded: false\n    }\n    this.handleAddTodo = this.handleAddTodo.bind(this)   \n  }\n\n  componentWillMount(){\n    SocketClient.getAll( (items) => {\n      this.setState({\n        isLoaded:true,\n        todos: items\n      })\n    })\n  }\n\n  handleAddTodo(task){\n\n    SocketClient.create(task)\n\n    /*Client.create(task, (element) => {\n      this.setState({\n        todos: [element,...this.state.todos]\n      })\n    })*/\n\n\n  }\n\n  // 2 Creamos el handle\n  handleDeleteTodo(index){\n    Swal.fire({\n      title: 'Está seguro que desea borrar la tarea',\n      text: \"Esta accion no se puede deshacer\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si, borrar'\n    }).then((result) => {\n      if (result.value) {\n\n        SocketClient.delete(index)\n                       \n\n\n      }\n    })  \n  }\n\n  render() {\n\n    const {error, isLoaded} = this.state;\n\n    if(error){\n      return <div> {error.message} </div>\n    } else if(!isLoaded){\n      return <div> Loading ...</div>\n    } else {\n      return (\n        <div className=\"App\">      \n          <Navigation titulo=\"TodoApp Extreme\" />\n  \n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-4\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" /> \n                <TodoForm onAddTodo={this.handleAddTodo} />\n              </div>\n  \n              <div className=\"col-md-8\">\n                  <TodoContainer todos={this.state.todos} onDeleteTodo={this.handleDeleteTodo.bind(this)} />\n              </div>\n  \n            </div>\n          </div>\n        </div>      \n      );\n    }\n\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}